---
import { getCollection } from 'astro:content';
import BaseLayout from '../../layouts/BaseLayout.astro';

export async function getStaticPaths() {
  const posts = await getCollection('blog');
  return posts.map((post) => ({
    params: { slug: post.slug },
    props: { post },
  }));
}

const { post } = Astro.props;
const { Content } = await post.render();
---

<BaseLayout title={`${post.data.title} - jeansy.org`} description={post.data.description}>
  <Fragment slot="head">
    <!-- Article-specific Open Graph tags -->
    <meta property="og:type" content="article" />
    <meta property="article:published_time" content={post.data.pubDate.toISOString()} />
    <meta property="article:author" content="Richard Jeans" />
    {post.data.tags && post.data.tags.map((tag) => (
      <meta property="article:tag" content={tag} />
    ))}

    <!-- JSON-LD Structured Data for BlogPosting -->
    <script type="application/ld+json" set:html={JSON.stringify({
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": post.data.title,
      "description": post.data.description,
      "image": post.data.image ? `https://jeansy.org${post.data.image}` : "https://jeansy.org/images/og-default.svg",
      "author": {
        "@type": "Person",
        "name": post.data.author || "Richard Jeans",
        "url": "https://jeansy.org",
        "sameAs": [
          "https://github.com/rjeans",
          "https://www.linkedin.com/in/rjeans/",
          "https://x.com/rjeans"
        ]
      },
      "datePublished": post.data.pubDate.toISOString(),
      "dateModified": post.data.updatedDate ? post.data.updatedDate.toISOString() : post.data.pubDate.toISOString(),
      "publisher": {
        "@type": "Person",
        "name": "Richard Jeans",
        "url": "https://jeansy.org",
        "logo": {
          "@type": "ImageObject",
          "url": "https://jeansy.org/images/og-default.svg"
        }
      },
      "mainEntityOfPage": {
        "@type": "WebPage",
        "@id": Astro.url.href
      },
      "keywords": post.data.tags?.join(', ') || '',
      "inLanguage": "en-US"
    })} />
  </Fragment>
  <article class="max-w-3xl mx-auto">
    <header class="mb-12">
      <h1 class="text-2xl font-bold mb-4" style="line-height: 1.4;">{post.data.title}</h1>
      <div class="flex items-center text-sm mb-4" style="color: var(--text-muted);">
        <time datetime={post.data.pubDate.toISOString()}>
          {new Date(post.data.pubDate).toLocaleDateString('en-GB', {
            year: 'numeric',
            month: '2-digit',
            day: '2-digit'
          })}
        </time>
        {post.data.tags && (
          <div class="ml-4 flex gap-2">
            {post.data.tags.map((tag) => (
              <span class="px-2 py-1 rounded text-xs" style="background-color: var(--tag-bg); color: var(--tag-text);">
                {tag}
              </span>
            ))}
          </div>
        )}
      </div>
    </header>
    
    <div class="prose prose-lg max-w-none">
      <Content />
    </div>
    
    <footer class="mt-16 pt-8 border-t" style="border-color: var(--border-color);">
      <a href="/blog" style="color: var(--link-color); text-decoration: none;" class="hover:underline">
        ‚Üê Back to Blog
      </a>
    </footer>
  </article>
</BaseLayout>